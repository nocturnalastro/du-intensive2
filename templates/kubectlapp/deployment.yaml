{{ $Replica := "1"}}
{{ if ne (index . "Replica") nil }}
{{ $Replica = .Replica }} {{/* Replica isn't set if replica set to 1  // TODO raise bug in kube-burner */}}
{{- end }}
{{ $suffix := $Replica }}
{{- if .group }}
{{- $suffix = print .group "-" $Replica }}
{{- end }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kubectlapp-{{ $suffix }}
spec:
  template:
    metadata:
      labels:
        name: kubectlapp-{{ $suffix }}
        redhat-best-practices-for-k8s.com/generic: target
    spec:
      serviceAccountName: kubectlapp-sa-{{ $suffix }}
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      containers:
        - name: kubectlapp
          image: {{ .Image_kubectl | quote }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args:
          - |
            while true; do
              kubectl get pods -n workload
              kubectl get services -n workload
              sleep {{ .poll_interval | default 5 }}
            done
          resources:
            {{- $cpu_limit := .cpu_limit | default "100m" }}
            {{- $mem_limit := .mem_limit | default "128Mi" }}
            {{- $cpu_request := .cpu_request | default "80m" }}
            {{- $mem_request := .mem_request | default "100Mi" }}
            requests:
              cpu: {{ (.cpu_request | default $cpu_request) | quote }}
              memory: {{ (.mem_request | default $mem_request) | quote }}
              {{- if .hugepages_request | default .hugepages_limit }}
              hugepages-1Gi: {{ .hugepages_request | default .hugepages_limit | quote }}
              {{- end }}
              {{- if .ephemeral_storage_request | default .ephemeral_storage_limit }}
              ephemeral-storage: {{ .ephemeral_storage_request | default .ephemeral_storage_limit | quote }}
              {{- end }}
            limits:
              cpu: {{ $cpu_limit | quote }}
              memory: {{ $mem_limit | quote }}
              {{- if .hugepages_limit }}
              hugepages-1Gi: {{ .hugepages_limit | quote }}
              {{- end }}
              {{- if .ephemeral_storage_limit }}
              ephemeral-storage: {{ .ephemeral_storage_limit | quote }}
              {{- end }}
          volumeMounts:
            {{- template "parts_volume_mounts" (dict "volumes" .volumes "indent" 12) }}
        - name: nginx
          image: {{ .Image_nginx | quote }}
          resources:
            {{- $nginx := .nginx | default dict }}
            {{- $cpu_limit := $nginx.cpu_limit | default "100m" }}
            {{- $mem_limit := $nginx.mem_limit | default "128Mi" }}
            requests:
              cpu: {{ $nginx.cpu_request | default $cpu_limit | quote }}
              memory: {{ $nginx.mem_request | default $mem_limit | quote }}
              {{- if $nginx.hugepages_request | default $nginx.hugepages_limit }}
              hugepages-1Gi: {{ $nginx.hugepages_request | default $nginx.hugepages_limit | quote }}
              {{- end }}
              {{- if $nginx.ephemeral_storage_request | default $nginx.ephemeral_storage_limit }}
              ephemeral-storage: {{ $nginx.ephemeral_storage_request | default $nginx.ephemeral_storage_limit | quote }}
              {{- end }}
            limits:
              cpu: {{ $cpu_limit | quote }}
              memory: {{ $mem_limit | quote }}
              {{- if $nginx.hugepages_limit }}
              hugepages-1Gi: {{ $nginx.hugepages_limit | quote }}
              {{- end }}
              {{- if $nginx.ephemeral_storage_limit }}
              ephemeral-storage: {{ $nginx.ephemeral_storage_limit | quote }}
              {{- end }}
          ports:
            - containerPort: 8080
          startupProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 60
        {{- template "parts_extra_containers" (dict "N_extra_containers" (.N_extra_containers | default 0) "Image_ubi" (.Image_ubi | default "") "Replica" $suffix "extra_volumes" .extra_volumes "indent" 8) }}
      restartPolicy: Always
      volumes:
        {{- template "parts_volume_defs" (dict "volumes" .volumes "indent" 8) }}
  replicas: {{ .num_of_replicas | default 1 | int }}
  selector:
    matchLabels:
      name: kubectlapp-{{ $suffix }}
      redhat-best-practices-for-k8s.com/generic: target
  strategy:
    type: RollingUpdate
