apiVersion: apps/v1
kind: Deployment
metadata:
  name: du-workload-{{.Replica}}
  labels:
    group: load
    svc: du-workload-{{ .Replica }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: du-workload-{{ .Replica }}
      redhat-best-practices-for-k8s.com/generic: target
  template:
    metadata:
      labels:
        group: load
        name: du-workload-{{ .Replica }}
        redhat-best-practices-for-k8s.com/generic: target
      annotations:
        # Disable CPU balance with CRIO
        irq-load-balancing.crio.io: "disable"
        cpu-load-balancing.crio.io: "disable"
        cpu-quota.crio.io: "disable"
    spec:
      runtimeClassName: {{ .performanceProfile | default "performance-openshift-node-performance-profile" }}
      containers:
        - image: {{ .Image_stressng | quote}}
          imagePullPolicy: IfNotPresent
          name: du-workload-{{ .Replica }}
          # Request and Limits must be identical for the Pod to be assigned to the QoS Guarantee
          resources:
            requests:
              cpu: 31
              memory: 1024M
              hugepages-1Gi: 16Gi
            limits:
              cpu: 31
              memory: 1024M
              hugepages-1Gi: 16Gi
          env:
            - name: stress_cpu
              value: "31"
            - name: stress_vm
              value: "1"
            - name: stress_vm-bytes
              value: "512M"
          volumeMounts:
            {{- range  $volume := .volumes }}
            - name: {{ $volume.name | default $volume.value }}
              mountPath: {{ $volume.path }}
            {{- end }}
            - name: hugepage
              mountPath: /hugepages
        - name: nginx
          image: {{ .Image_nginx | quote }}
          resources:
            requests:
              cpu: 1
              memory: 256Mi
            limits:
              cpu: 1
              memory: 256Mi
          ports:
            - containerPort: 8080
          startupProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 60
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 60
      dnsPolicy: Default
      terminationGracePeriodSeconds: 1
      volumes:
        {{- range $volume := .volumes }}
        - name: {{ $volume.name | default $volume.value }}
          {{- if eq $volume.type "configMap" }}
          configMap:
            name: {{ $volume.value }}
          {{- else if eq $volume.type "secret" }}
          secret:
            secretName: {{ $volume.value }}
          {{- else if eq $volume.type "persistentVolumeClaim" }}
          persistentVolumeClaim:
            claimName: {{ $volume.value }}
          {{- else if eq $volume.type "emptyDir" }}
          emptyDir: {{ $volume.emptyDirConfig | default dict | toJson }}
          {{- else if eq $volume.type "hostpath" }}
          hostPath:
            path: {{ $volume.path }}
            type: ""
          {{- end }}
        {{- end }}
        - name: hugepage
          emptyDir:
            medium: HugePages